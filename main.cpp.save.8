/***************************************************************************
* PROGRAMMED BY : Ahmer Yasin & Seth Just & Thokozile Hambayi
* CLASS         : CS1B
* SECTION       : TTh 1:30pm
* MODULE        : 1
* GROUP LAB     : 1
* PROGRAM NAME  : Linear Search
* PURPOSE       : The program performs a linear search over a list of book titles
* DUE DATE      : 09/04/2025
****************************************************************************/

#include "linear_search_header.h"


int main()
{
	// Constants


	// Variables
	string         headingString;      // OUT - class heading
	string         endOfProgramString; // OUT - end of program statement
	string		   topBotString;
	char           choiceInput;
	bool           invalidInput;
	bool			   quit;
	vector<string> bookTitlesVecList;
	bookTitlesVecList.reserve(100);
	vector<string> bookTitlesVecListLowerCase;
	bookTitlesVecListLowerCase.reserve(100);
	string         title;
	char           titleChar;
	string			searchInput;
	//int				linearSearchIndex;


	// Class heading banner
	headingString = OutputClassHeading();
	cout << headingString;

	// Titles
	bookTitlesVecList = {"Star Wars",
								"The Empire Strikes Back (Star Wars)",
								"Splinter of the Mind's Eye (Star Wars)",
								"Return of the Jedi (Star Wars)",
								"Heir to the Empire (Star Wars: The Thrawn Trilogy, Vol. 1)",
								"Dark Force Rising (Star Wars: The Thrawn Trilogy, Vol. 2)",
								"The Last Command (Star Wars: The Thrawn Trilogy)",
								"Specter of the Past (Star Wars: The Hand of Thrawn #1)",
								"Vision of the Future (Star Wars: The Hand of Thrawn, Book 2)",
								"Battlestar Galactica",
								"New Battlestar Galactica Volume 1 (Battlestar Galactica (Dynamite)) (v. 1)",
								"New Battlestar Galactica Volume II Hardcover (Battlestar Galactica (Dynamite))",
								"The Hobbit",
								"The Lord of the Rings: 50th Anniversary, One Vol. Edition",
								"The Two Towers",
								"The Return of the King",
								"The Fellowship of the Ring",
								"C++ Programming: From Problem Analysis to Program Design 7th Edition",
								"Digital Computer Electronics",
								"Assembly Language for x86 Processors (7th Edition)"};









	// Words which start with the words containing "The" or "A" or "An" in the title are erased and inserted to end of the string of the title.
	// For example:
	// "The Return of the King"   is changed to  "Return of the King, The"
	// "An American Tragedy"      is changed to  "American Tragedy, An"
	// "A Brief History of Time"  is changed to  "Brief History of Time, A"
	CatalogTitleFormatVector(bookTitlesVecList);



	// Sorts lists in alphabetical order
	sort(bookTitlesVecList.begin(), bookTitlesVecList.end());



	// Copies the book titles and changes all characters to lower case characters to a new vector
	for (int indexVec = 0; indexVec < int(bookTitlesVecList.size()); indexVec += 1)
	{
		title = bookTitlesVecList[indexVec];

		for(int indexStr = 0; indexStr < int(bookTitlesVecList[indexVec].size()); indexStr += 1)
		{
			titleChar       = tolower( bookTitlesVecList[indexVec][indexStr] );
			title[indexStr] = titleChar;
		}

		bookTitlesVecListLowerCase.push_back(title);
	}








	// Menu Display
	topBotString = OutputStringOfCharacter(37);
	cout << topBotString << endl
		  << "*" << left  << setw(11) << " " << "Linear Search" << setw(11) << " " << "*" << endl
		  << topBotString << endl
		  << "*" << " <S>earch" << setw(26) << " " << "*" << endl
		  << "*" << " <Q>uit"   << setw(28) << " " << "*" << endl
		  << topBotString << endl;







	//Input Prompt
	quit = true;

	do // while (quit)
	{





		// Input prompt for Choice and error check
		do
		{
			invalidInput = false;

			cout << setw(6) << "Choice: ";
   		cin.get(choiceInput);
			choiceInput = toupper(choiceInput);


			if (choiceInput != 'S' && choiceInput != 'Q')
			{
				cout << endl << "Invalid choice. Please enter \"S\" to search or \"Q\" to quit." << endl << endl;
				invalidInput = false;
			}

			cin.ignore(10000,'\n');

		} while (invalidInput);







		// Input prompt for Search and error check
		if(choiceInput == 'S')
		{
			do
			{
				invalidInput = false;

				cout << setw(6) << "Search: ";
				getline(cin, searchInput);

				// Error check for any spaces in input
				for (int index = 0; index < int(searchInput.size()); index += 1)
				{
					if (searchInput[index] == ' ')
					{
						invalidInput = true;
					}
				}


				// Error Check Message
				if (invalidInput)
				{
					cout << endl << "Invalid input. Please enter one word and without spaces." << endl << endl;
				}
				else
				{
					// Lower case loop for input string
					for (int index = 0; index < int(searchInput.size()); index += 1)
					{
						titleChar          = tolower(searchInput[index]);
						searchInput[index] = titleChar;
					}

					linearSearchIndex = linearSearch(bookTitlesVecListLowerCase, searchInput);

					cout << endl;
				}

			} while(invalidInput);

		}









	quit = (choiceInput != 'Q');
	} while (quit);







	//End of Program Statement
	endOfProgramString = EndOfProgramBanner();
	cout << endOfProgramString  << endl << endl;
	return 0;
}
